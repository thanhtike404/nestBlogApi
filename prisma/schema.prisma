generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog_posts {
  id             BigInt          @id @default(autoincrement())
  created_at     DateTime?       @db.Timestamp(0)
  updated_at     DateTime?       @db.Timestamp(0)
  title          String          @db.VarChar(255)
  is_published   Boolean         @default(false)
  published_at   DateTime?       @db.Timestamp(0)
  slug           String          @unique(map: "blog_posts_slug_unique") @db.VarChar(255)
  user_id        BigInt

  excerpt        String?
  featured_image String?         @db.VarChar(255)
  seo_meta       Json?           @db.Json
  reading_time   Int?
  views_count    Int             @default(0)
  is_featured    Boolean         @default(false)
  content        String?
  
  users          users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blog_posts_user_id_foreign")

  post_tag       post_tag[]


  @@index([is_featured], map: "blog_posts_is_featured_index")
  @@index([is_published, published_at], map: "blog_posts_is_published_published_at_index")
  @@index([user_id, is_published], map: "blog_posts_user_id_is_published_index")
  @@index([views_count], map: "blog_posts_views_count_index")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}


model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}



model post_tag {
  post_id    BigInt
  tag_id     BigInt
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  blog_posts blog_posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_tag_post_id_foreign")
  tags       tags       @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_tag_tag_id_foreign")

  @@id([post_id, tag_id])
  @@index([post_id, tag_id], map: "post_tag_post_id_tag_id_index")
  @@index([tag_id, post_id], map: "post_tag_tag_id_post_id_index")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model tags {
  id           BigInt     @id @default(autoincrement())
  name         String     @db.VarChar(255)
  slug         String     @unique(map: "tags_slug_unique") @db.VarChar(255)
  color        String?    @db.VarChar(255)
  description  String?
  official_url String?    @db.VarChar(255)
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  post_tag     post_tag[]

  @@index([slug], map: "tags_slug_index")
}

model users {
  id                BigInt       @id @default(autoincrement())
  name              String       @db.VarChar(255)
  email             String       @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?    @db.Timestamp(0)
  password          String       @db.VarChar(255)
  remember_token    String?      @db.VarChar(100)
  created_at        DateTime?    @db.Timestamp(0)
  updated_at        DateTime?    @db.Timestamp(0)
  blog_posts        blog_posts[]
  followers         Follows[]   @relation("Followers")
  following         Follows[]   @relation("Following")
}


model Follows {
  followerId  BigInt
  followedId  BigInt
  createdAt   DateTime @default(now())
  follower    users    @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followed    users    @relation("Followers", fields: [followedId], references: [id], onDelete: Cascade)
  @@id([followerId, followedId])
}